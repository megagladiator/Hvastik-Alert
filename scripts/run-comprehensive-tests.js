#!/usr/bin/env node

/**
 * –°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:
 * 1. Unit —Ç–µ—Å—Ç—ã
 * 2. Integration —Ç–µ—Å—Ç—ã
 * 3. E2E —Ç–µ—Å—Ç—ã
 * 4. Performance —Ç–µ—Å—Ç—ã
 */

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
function colorLog(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  colorLog(`\nüöÄ ${description}`, 'cyan')
  colorLog(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`, 'blue')
  
  try {
    const startTime = Date.now()
    const output = execSync(command, { 
      encoding: 'utf8',
      stdio: 'inherit',
      cwd: process.cwd()
    })
    const endTime = Date.now()
    const duration = ((endTime - startTime) / 1000).toFixed(2)
    
    colorLog(`‚úÖ ${description} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}—Å`, 'green')
    return { success: true, duration, output }
  } catch (error) {
    colorLog(`‚ùå –û—à–∏–±–∫–∞ –≤ ${description}:`, 'red')
    console.error(error.message)
    return { success: false, error: error.message }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function checkTestFiles() {
  const testFiles = [
    '__tests__/integration/password-reset-comprehensive.test.ts',
    '__tests__/e2e/password-reset-e2e.test.ts',
    '__tests__/performance/password-reset-performance.test.ts'
  ]
  
  colorLog('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...', 'yellow')
  
  const missingFiles = []
  testFiles.forEach(file => {
    if (fs.existsSync(file)) {
      colorLog(`‚úÖ ${file}`, 'green')
    } else {
      colorLog(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`, 'red')
      missingFiles.push(file)
    }
  })
  
  if (missingFiles.length > 0) {
    colorLog(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${missingFiles.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤`, 'yellow')
    return false
  }
  
  return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkDependencies() {
  colorLog('\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...', 'yellow')
  
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
  const requiredDeps = [
    'jest',
    '@playwright/test',
    '@supabase/supabase-js'
  ]
  
  const missingDeps = []
  requiredDeps.forEach(dep => {
    if (packageJson.dependencies[dep] || packageJson.devDependencies[dep]) {
      colorLog(`‚úÖ ${dep}`, 'green')
    } else {
      colorLog(`‚ùå ${dep} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`, 'red')
      missingDeps.push(dep)
    }
  })
  
  if (missingDeps.length > 0) {
    colorLog(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${missingDeps.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π`, 'yellow')
    return false
  }
  
  return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
function generateReport(results) {
  const timestamp = new Date().toISOString()
  const reportPath = `test-reports/comprehensive-test-report-${timestamp.replace(/[:.]/g, '-')}.json`
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
  if (!fs.existsSync('test-reports')) {
    fs.mkdirSync('test-reports', { recursive: true })
  }
  
  const report = {
    timestamp,
    summary: {
      total: results.length,
      passed: results.filter(r => r.success).length,
      failed: results.filter(r => !r.success).length
    },
    results,
    environment: {
      node: process.version,
      platform: process.platform,
      arch: process.arch
    }
  }
  
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2))
  colorLog(`\nüìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`, 'cyan')
  
  return report
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runComprehensiveTests() {
  colorLog('üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø', 'bright')
  colorLog('=' * 60, 'cyan')
  
  const startTime = Date.now()
  const results = []
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  if (!checkTestFiles()) {
    colorLog('\n‚ùå –ù–µ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.', 'red')
    process.exit(1)
  }
  
  if (!checkDependencies()) {
    colorLog('\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.', 'red')
    process.exit(1)
  }
  
  // 2. –ó–∞–ø—É—Å–∫–∞–µ–º Unit —Ç–µ—Å—Ç—ã
  const unitTestResult = runCommand(
    'npm test -- --testPathPattern="__tests__/simple" --verbose',
    'Unit —Ç–µ—Å—Ç—ã'
  )
  results.push({ name: 'Unit —Ç–µ—Å—Ç—ã', ...unitTestResult })
  
  // 3. –ó–∞–ø—É—Å–∫–∞–µ–º Integration —Ç–µ—Å—Ç—ã
  const integrationTestResult = runCommand(
    'npm test -- --testPathPattern="__tests__/integration" --verbose',
    'Integration —Ç–µ—Å—Ç—ã'
  )
  results.push({ name: 'Integration —Ç–µ—Å—Ç—ã', ...integrationTestResult })
  
  // 4. –ó–∞–ø—É—Å–∫–∞–µ–º Performance —Ç–µ—Å—Ç—ã
  const performanceTestResult = runCommand(
    'npm test -- --testPathPattern="__tests__/performance" --verbose',
    'Performance —Ç–µ—Å—Ç—ã'
  )
  results.push({ name: 'Performance —Ç–µ—Å—Ç—ã', ...performanceTestResult })
  
  // 5. –ó–∞–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ Playwright —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
  try {
    const e2eTestResult = runCommand(
      'npx playwright test __tests__/e2e/password-reset-e2e.test.ts',
      'E2E —Ç–µ—Å—Ç—ã'
    )
    results.push({ name: 'E2E —Ç–µ—Å—Ç—ã', ...e2eTestResult })
  } catch (error) {
    colorLog('‚ö†Ô∏è  E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (Playwright –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)', 'yellow')
    results.push({ name: 'E2E —Ç–µ—Å—Ç—ã', success: false, error: 'Playwright –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' })
  }
  
  // 6. –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã
  const apiTestResult = runCommand(
    'npm test -- --testPathPattern="__tests__/api" --verbose',
    'API —Ç–µ—Å—Ç—ã'
  )
  results.push({ name: 'API —Ç–µ—Å—Ç—ã', ...apiTestResult })
  
  // 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  const endTime = Date.now()
  const totalDuration = ((endTime - startTime) / 1000).toFixed(2)
  
  const report = generateReport(results)
  
  // 8. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  colorLog('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê', 'bright')
  colorLog('=' * 30, 'cyan')
  
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå'
    const duration = result.duration ? ` (${result.duration}—Å)` : ''
    const color = result.success ? 'green' : 'red'
    colorLog(`${status} ${result.name}${duration}`, color)
  })
  
  colorLog(`\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalDuration}—Å`, 'cyan')
  colorLog(`üìà –£—Å–ø–µ—à–Ω–æ: ${report.summary.passed}/${report.summary.total}`, 'green')
  colorLog(`üìâ –ù–µ—É–¥–∞—á–Ω–æ: ${report.summary.failed}/${report.summary.total}`, 'red')
  
  // 9. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const allPassed = results.every(r => r.success)
  
  if (allPassed) {
    colorLog('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!', 'green')
    process.exit(0)
  } else {
    colorLog('\nüí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!', 'red')
    process.exit(1)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  colorLog(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red')
  process.exit(1)
})

process.on('unhandledRejection', (reason) => {
  colorLog(`\nüí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${reason}`, 'red')
  process.exit(1)
})

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runComprehensiveTests().catch(error => {
    colorLog(`\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`, 'red')
    process.exit(1)
  })
}

module.exports = { runComprehensiveTests }
