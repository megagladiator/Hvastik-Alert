require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Supabase credentials not found in environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function cleanupAllChats() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤...\n');
  
  try {
    const { data: allChats, error: chatsError } = await supabase
      .from('chats')
      .select('*');
    
    if (chatsError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', chatsError);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: ${allChats?.length || 0}`);
    
    if (!allChats || allChats.length === 0) {
      console.log('‚úÖ –ß–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç');
      return;
    }
    
    const { data: allMessages, error: messagesError } = await supabase
      .from('messages')
      .select('*');
    
    if (messagesError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', messagesError);
      return;
    }
    
    console.log(`üí¨ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages?.length || 0}`);
    
    if (allMessages && allMessages.length > 0) {
      const { error: deleteMessagesError } = await supabase
        .from('messages')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (deleteMessagesError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', deleteMessagesError);
      } else {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
      }
    }
    
    const { error: deleteChatsError } = await supabase
      .from('chats')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000');
    
    if (deleteChatsError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', deleteChatsError);
    } else {
      console.log('‚úÖ –ß–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã');
    }
    
    const { data: remainingChats } = await supabase
      .from('chats')
      .select('*');
    
    const { data: remainingMessages } = await supabase
      .from('messages')
      .select('*');
    
    console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:');
    console.log(`   –û—Å—Ç–∞–ª–æ—Å—å —á–∞—Ç–æ–≤: ${remainingChats?.length || 0}`);
    console.log(`   –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: ${remainingMessages?.length || 0}`);
    
    if ((remainingChats?.length || 0) === 0 && (remainingMessages?.length || 0) === 0) {
      console.log('üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  }
}

cleanupAllChats();
