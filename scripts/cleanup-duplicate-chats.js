require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function cleanupDuplicateChats() {
  try {
    console.log('üîç –ò—â–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —á–∞—Ç—ã...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
    const { data: allChats, error: fetchError } = await supabase
      .from('chats')
      .select('*')
      .order('created_at', { ascending: true })

    if (fetchError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', fetchError)
      return
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: ${allChats.length}`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ pet_id, user_id, owner_id
    const chatGroups = {}
    
    allChats.forEach(chat => {
      const key = `${chat.pet_id}-${chat.user_id}-${chat.owner_id}`
      if (!chatGroups[key]) {
        chatGroups[key] = []
      }
      chatGroups[key].push(chat)
    })

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = []
    Object.values(chatGroups).forEach(group => {
      if (group.length > 1) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π)
        group.sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ (—Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ)
        duplicates.push(...group.slice(1))
      }
    })

    console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —á–∞—Ç–æ–≤: ${duplicates.length}`)

    if (duplicates.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates.forEach((chat, index) => {
      console.log(`${index + 1}. –ß–∞—Ç ID: ${chat.id.slice(0, 8)}... | –°–æ–∑–¥–∞–Ω: ${chat.created_at} | –°—Ç–∞—Ç—É—Å: ${chat.status}`)
    })

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const chatIdsToDelete = duplicates.map(chat => chat.id)
    
    const { error: deleteError } = await supabase
      .from('chats')
      .delete()
      .in('id', chatIdsToDelete)

    if (deleteError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', deleteError)
      return
    }

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —á–∞—Ç–æ–≤: ${duplicates.length}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: remainingChats } = await supabase
      .from('chats')
      .select('id')
    
    console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å —á–∞—Ç–æ–≤: ${remainingChats.length}`)

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error)
  }
}

cleanupDuplicateChats()

