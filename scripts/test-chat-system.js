require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Supabase credentials not found in environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testChatSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...');
    
    const { data: chatsTable, error: chatsError } = await supabase
      .from('chats')
      .select('*')
      .limit(1);
    
    if (chatsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ chats:', chatsError.message);
      return;
    }
    
    const { data: messagesTable, error: messagesError } = await supabase
      .from('messages')
      .select('*')
      .limit(1);
    
    if (messagesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ messages:', messagesError.message);
      return;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã chats –∏ messages –¥–æ—Å—Ç—É–ø–Ω—ã');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message);
      return;
    }
    
    if (!users || users.users.length === 0) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.users.length}`);
    users.users.forEach(user => {
      console.log(`   - ${user.email} (${user.id.slice(0, 8)}...)`);
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—Ç–æ–º—Ü–µ–≤
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤...');
    
    const { data: pets, error: petsError } = await supabase
      .from('pets')
      .select('*')
      .eq('status', 'active')
      .limit(5);
    
    if (petsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤:', petsError.message);
      return;
    }
    
    if (!pets || pets.length === 0) {
      console.log('‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤.');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤: ${pets.length}`);
    pets.forEach(pet => {
      console.log(`   - ${pet.name} (${pet.type}, –≤–ª–∞–¥–µ–ª–µ—Ü: ${pet.user_id.slice(0, 8)}...)`);
    });
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞...');
    
    if (users.users.length >= 2 && pets.length >= 1) {
      const user1 = users.users[0];
      const user2 = users.users[1];
      const testPet = pets[0];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ù–ï —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–∏—Ç–æ–º—Ü–∞
      const chatUser = testPet.user_id === user1.id ? user2 : user1;
      const petOwner = testPet.user_id;
      
      console.log(`–°–æ–∑–¥–∞–µ–º —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${chatUser.email} –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–∏—Ç–æ–º—Ü–∞ ${testPet.name}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
      const chatData = {
        petId: testPet.id,
        userId: chatUser.id,
        ownerId: petOwner
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', chatData);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      const { data: newChat, error: chatError } = await supabase
        .from('chats')
        .insert({
          pet_id: chatData.petId,
          user_id: chatData.userId,
          owner_id: chatData.ownerId,
          status: 'active'
        })
        .select()
        .single();
      
      if (chatError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', chatError.message);
      } else {
        console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', newChat.id);
        
        // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        
        const { data: newMessage, error: messageError } = await supabase
          .from('messages')
          .insert({
            chat_id: newChat.id,
            sender_id: chatUser.id,
            sender_type: 'user',
            text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          })
          .select()
          .single();
        
        if (messageError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageError.message);
        } else {
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', newMessage.text);
        }
        
        // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
        console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞...');
        
        const { data: ownerMessage, error: ownerMessageError } = await supabase
          .from('messages')
          .insert({
            chat_id: newChat.id,
            sender_id: petOwner,
            sender_type: 'owner',
            text: '–û—Ç–≤–µ—Ç –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–∏—Ç–æ–º—Ü–∞'
          })
          .select()
          .single();
        
        if (ownerMessageError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', ownerMessageError.message);
        } else {
          console.log('‚úÖ –û—Ç–≤–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', ownerMessage.text);
        }
        
        // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–æ–≤
        console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤...');
        
        const { data: userChats, error: userChatsError } = await supabase
          .from('chats')
          .select(`
            *,
            pets!inner(
              id,
              name,
              breed,
              type,
              status
            )
          `)
          .or(`user_id.eq.${chatUser.id},owner_id.eq.${chatUser.id}`)
          .eq('status', 'active')
          .order('updated_at', { ascending: false });
        
        if (userChatsError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userChatsError.message);
        } else {
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userChats.length}`);
        }
        
        const { data: ownerChats, error: ownerChatsError } = await supabase
          .from('chats')
          .select(`
            *,
            pets!inner(
              id,
              name,
              breed,
              type,
              status
            )
          `)
          .or(`user_id.eq.${petOwner},owner_id.eq.${petOwner}`)
          .eq('status', 'active')
          .order('updated_at', { ascending: false });
        
        if (ownerChatsError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', ownerChatsError.message);
        } else {
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${ownerChats.length}`);
        }
        
        // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        console.log('\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞...');
        
        const { data: archivedChat, error: archiveError } = await supabase
          .from('chats')
          .update({
            status: 'archived',
            archived_at: new Date().toISOString(),
            archived_by: petOwner
          })
          .eq('id', newChat.id)
          .eq('owner_id', petOwner)
          .select()
          .single();
        
        if (archiveError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞:', archiveError.message);
        } else {
          console.log('‚úÖ –ß–∞—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω:', archivedChat.status);
        }
        
        // 9. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        console.log('\n9Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞...');
        
        const { data: restoredChat, error: restoreError } = await supabase
          .from('chats')
          .update({
            status: 'active',
            archived_at: null,
            archived_by: null
          })
          .eq('id', newChat.id)
          .eq('owner_id', petOwner)
          .select()
          .single();
        
        if (restoreError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞:', restoreError.message);
        } else {
          console.log('‚úÖ –ß–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', restoredChat.status);
        }
        
        // 10. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        await supabase.from('messages').delete().eq('chat_id', newChat.id);
        await supabase.from('chats').delete().eq('id', newChat.id);
        
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

testChatSystem();
