#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º pre-commit hook
function setupPreCommitHook() {
  const hooksDir = path.join(__dirname, '..', '.git', 'hooks');
  const preCommitFile = path.join(hooksDir, 'pre-commit');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ .git/hooks
  if (!fs.existsSync(hooksDir)) {
    console.log('‚ùå .git/hooks directory not found. Make sure you are in a git repository.');
    return false;
  }
  
  const hookContent = `#!/bin/sh
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º

echo "üöÄ Updating version before commit..."

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
node scripts/update-version.js

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç
git add version.json package.json README.md

echo "‚úÖ Version updated and files staged"
`;

  try {
    fs.writeFileSync(preCommitFile, hookContent);
    
    // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    fs.chmodSync(preCommitFile, '755');
    
    console.log('‚úÖ Pre-commit hook installed successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Error setting up pre-commit hook:', error.message);
    return false;
  }
}

// –°–æ–∑–¥–∞–µ–º post-commit hook –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function setupPostCommitHook() {
  const hooksDir = path.join(__dirname, '..', '.git', 'hooks');
  const postCommitFile = path.join(hooksDir, 'post-commit');
  
  const hookContent = `#!/bin/sh
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –≤–µ—Ä—Å–∏–µ–π

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
COMMIT_HASH=$(git rev-parse --short HEAD)
COMMIT_MESSAGE=$(git log -1 --pretty=%B)

# –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ version.json
VERSION=$(node -p "require('./version.json').version")

echo "üìù Commit: $COMMIT_HASH"
echo "üì¶ Version: $VERSION"
echo "üí¨ Message: $COMMIT_MESSAGE"
`;

  try {
    fs.writeFileSync(postCommitFile, hookContent);
    fs.chmodSync(postCommitFile, '755');
    
    console.log('‚úÖ Post-commit hook installed successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Error setting up post-commit hook:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß Setting up Git hooks for automatic versioning...');
  
  const preCommitSuccess = setupPreCommitHook();
  const postCommitSuccess = setupPostCommitHook();
  
  if (preCommitSuccess && postCommitSuccess) {
    console.log('üéâ Git hooks installed successfully!');
    console.log('üìã Now every commit will automatically update the version.');
    console.log('üí° To test: make a commit and see the version update automatically.');
  } else {
    console.log('‚ùå Some hooks failed to install. Please check the errors above.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { setupPreCommitHook, setupPostCommitHook };
