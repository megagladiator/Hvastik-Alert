#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
function updateVersion(newVersion, description = '') {
  const versionPath = path.join(__dirname, '..', 'version.json');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const versionData = JSON.parse(fs.readFileSync(versionPath, 'utf8'));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    const oldVersion = versionData.version;
    versionData.version = newVersion;
    versionData.buildDate = new Date().toISOString().split('T')[0];
    versionData.buildTime = new Date().toLocaleTimeString('ru-RU', { 
      hour12: false,
      timeZone: 'Europe/Moscow'
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ changelog
    if (!versionData.changelog) {
      versionData.changelog = {};
    }
    
    versionData.changelog[newVersion] = {
      date: versionData.buildDate,
      changes: description ? [description] : [`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ ${newVersion}`]
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    fs.writeFileSync(versionPath, JSON.stringify(versionData, null, 2));
    
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å ${oldVersion} –Ω–∞ ${newVersion}`);
    console.log(`üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: ${versionData.buildDate} ${versionData.buildTime}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const newVersion = args[0];
const description = args.slice(1).join(' ');

if (!newVersion) {
  console.log('üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/update-version.js <–Ω–æ–≤–∞—è_–≤–µ—Ä—Å–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]');
  console.log('üìã –ü—Ä–∏–º–µ—Ä: node scripts/update-version.js 1.0.2 "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —á–∞—Ç–µ"');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0.2)
const versionRegex = /^\d+\.\d+\.\d+$/;
if (!versionRegex.test(newVersion)) {
  console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: X.Y.Z (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0.2)');
  process.exit(1);
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
updateVersion(newVersion, description);
