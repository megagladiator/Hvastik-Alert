#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
function updateVersion() {
  const versionFile = path.join(__dirname, '..', 'version.json');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const versionData = JSON.parse(fs.readFileSync(versionFile, 'utf8'));
    
    // –ü–∞—Ä—Å–∏–º –≤–µ—Ä—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.2.75" -> [1, 2, 75])
    const versionParts = versionData.version.split('.').map(Number);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é (—Ç—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä)
    versionParts[2] = (versionParts[2] || 0) + 1;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    const newVersion = versionParts.join('.');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    versionData.version = newVersion;
    versionData.buildDate = new Date().toISOString().split('T')[0];
    versionData.buildTime = new Date().toTimeString().split(' ')[0];
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    fs.writeFileSync(versionFile, JSON.stringify(versionData, null, 2));
    
    console.log(`‚úÖ Version updated to ${newVersion}`);
    console.log(`üìÖ Build date: ${versionData.buildDate}`);
    console.log(`‚è∞ Build time: ${versionData.buildTime}`);
    
    return newVersion;
  } catch (error) {
    console.error('‚ùå Error updating version:', error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è README
function updateReadme(newVersion) {
  const readmeFile = path.join(__dirname, '..', 'README.md');
  
  try {
    let readmeContent = fs.readFileSync(readmeFile, 'utf8');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ README
    const versionRegex = /## üÜï Recent Updates \(v[\d.]+ - \d+ \w+ \d+\)/;
    const currentDate = new Date().toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
    
    readmeContent = readmeContent.replace(
      versionRegex,
      `## üÜï Recent Updates (v${newVersion} - ${currentDate})`
    );
    
    fs.writeFileSync(readmeFile, readmeContent);
    console.log(`üìù README.md updated with version ${newVersion}`);
  } catch (error) {
    console.error('‚ùå Error updating README:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ changelog
function addChangelogEntry(newVersion) {
  const versionFile = path.join(__dirname, '..', 'version.json');
  
  try {
    const versionData = JSON.parse(fs.readFileSync(versionFile, 'utf8'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ changelog
    const currentDate = new Date().toISOString().split('T')[0];
    
    versionData.changelog[newVersion] = {
      date: currentDate,
      changes: [
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏",
        "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
      ]
    };
    
    fs.writeFileSync(versionFile, JSON.stringify(versionData, null, 2));
    console.log(`üìã Changelog updated with version ${newVersion}`);
  } catch (error) {
    console.error('‚ùå Error updating changelog:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ Starting version update...');
  
  const newVersion = updateVersion();
  updateReadme(newVersion);
  addChangelogEntry(newVersion);
  
  console.log(`üéâ Version ${newVersion} is ready!`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { updateVersion, updateReadme, addChangelogEntry };