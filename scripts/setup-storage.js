const { createClient } = require('@supabase/supabase-js')

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function setupStorage() {
  console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Supabase Storage...\n')

  try {
    // –°–æ–∑–¥–∞–µ–º bucket –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–∏—Ç–æ–º—Ü–µ–≤
    const { data: bucketData, error: bucketError } = await supabase.storage.createBucket('pet-photos', {
      public: true,
      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
      fileSizeLimit: 5242880, // 5MB
    })

    if (bucketError) {
      if (bucketError.message.includes('already exists')) {
        console.log('‚úÖ Bucket "pet-photos" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:', bucketError)
        return
      }
    } else {
      console.log('‚úÖ Bucket "pet-photos" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ bucket'–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const { data: buckets, error: listError } = await supabase.storage.listBuckets()
    
    if (listError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ bucket\'–æ–≤:', listError)
      return
    }

    console.log('\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ bucket\'—ã:')
    buckets.forEach(bucket => {
      console.log(`   - ${bucket.name} (–ø—É–±–ª–∏—á–Ω—ã–π: ${bucket.public})`)
    })

    console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Storage –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    console.log('üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ bucket "pet-photos"')

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

setupStorage()
