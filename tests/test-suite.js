/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –•–≤–æ—Å—Ç–∏–∫ Alert v1.1.5
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∞–π—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
 */

class TestSuite {
  constructor() {
    this.tests = []
    this.results = []
    this.baseUrl = 'http://localhost:3000'
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å
  addTest(name, testFunction, category = 'general') {
    this.tests.push({
      name,
      testFunction,
      category,
      status: 'pending'
    })
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –•–≤–æ—Å—Ç–∏–∫ Alert v1.1.5')
    console.log('=' * 60)
    
    for (const test of this.tests) {
      try {
        console.log(`\nüß™ –¢–µ—Å—Ç: ${test.name}`)
        console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${test.category}`)
        
        const startTime = Date.now()
        await test.testFunction()
        const endTime = Date.now()
        
        test.status = 'passed'
        test.duration = endTime - startTime
        
        console.log(`‚úÖ –ü–†–û–ô–î–ï–ù (${test.duration}ms)`)
        
      } catch (error) {
        test.status = 'failed'
        test.error = error.message
        
        console.log(`‚ùå –ü–†–û–í–ê–õ–ï–ù: ${error.message}`)
      }
      
      this.results.push(test)
    }
    
    this.printSummary()
  }

  // –í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  printSummary() {
    console.log('\n' + '=' * 60)
    console.log('üìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    console.log('=' * 60)
    
    const passed = this.results.filter(t => t.status === 'passed').length
    const failed = this.results.filter(t => t.status === 'failed').length
    const total = this.results.length
    
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`)
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`)
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${Math.round((passed / total) * 100)}%`)
    
    if (failed > 0) {
      console.log('\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:')
      this.results
        .filter(t => t.status === 'failed')
        .forEach(test => {
          console.log(`  ‚Ä¢ ${test.name}: ${test.error}`)
        })
    }
    
    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
    if (failed === 0) {
      console.log('  üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.')
    } else {
      console.log('  üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.')
      console.log('  üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.')
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async fetchPage(url) {
    const response = await fetch(url)
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    return response
  }

  async checkElementExists(selector) {
    const element = document.querySelector(selector)
    if (!element) {
      throw new Error(`–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${selector}`)
    }
    return element
  }

  async checkTextContent(selector, expectedText) {
    const element = await this.checkElementExists(selector)
    if (!element.textContent.includes(expectedText)) {
      throw new Error(`–û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç "${expectedText}", –ø–æ–ª—É—á–µ–Ω: "${element.textContent}"`)
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
const testSuite = new TestSuite()

// ============================================================================
// –¢–ï–°–¢–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
// ============================================================================

testSuite.addTest('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è', async () => {
  const response = await testSuite.fetchPage(testSuite.baseUrl)
  const html = await response.text()
  
  if (!html.includes('–•–≤–æ—Å—Ç–∏–∫ Alert')) {
    throw new Error('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–•–≤–æ—Å—Ç–∏–∫ Alert"')
  }
}, 'authentication')

testSuite.addTest('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/login`)
  if (!response.ok) {
    throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
  }
}, 'authentication')

testSuite.addTest('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/register`)
  if (!response.ok) {
    throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
  }
}, 'authentication')

testSuite.addTest('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω–∞', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/forgot-password`)
  if (!response.ok) {
    throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
  }
}, 'authentication')

// ============================================================================
// –¢–ï–°–¢–´ –û–°–ù–û–í–ù–û–ì–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê
// ============================================================================

testSuite.addTest('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/search`)
  const html = await response.text()
  
  if (!html.includes('–ö–∞—Ä—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')) {
    throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ö–∞—Ä—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"')
  }
}, 'core')

testSuite.addTest('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/add`)
  if (!response.ok) {
    throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
  }
}, 'core')

testSuite.addTest('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/cabinet`)
  if (!response.ok) {
    throw new Error('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
  }
}, 'core')

// ============================================================================
// –¢–ï–°–¢–´ API
// ============================================================================

testSuite.addTest('API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/api/admin/database-stats`)
  const data = await response.json()
  
  if (!data || typeof data.totalUsers !== 'number') {
    throw new Error('API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
  }
}, 'api')

testSuite.addTest('API —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/api/admin/database-tables`)
  const data = await response.json()
  
  if (!data || !Array.isArray(data.pets)) {
    throw new Error('API —Ç–∞–±–ª–∏—Ü –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
  }
}, 'api')

testSuite.addTest('API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
  const testAddress = '–ê–Ω–∞–ø–∞'
  const response = await fetch(`${testSuite.baseUrl}/api/geocode?address=${encodeURIComponent(testAddress)}`)
  
  if (!response.ok) {
    throw new Error('API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
  }
}, 'api')

// ============================================================================
// –¢–ï–°–¢–´ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
// ============================================================================

testSuite.addTest('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/admin`)
  if (!response.ok) {
    throw new Error('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
  }
}, 'admin')

testSuite.addTest('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏', async () => {
  const response = await testSuite.fetchPage(`${testSuite.baseUrl}/admin`)
  const html = await response.text()
  
  const requiredTabs = ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î', '–¢–∞–±–ª–∏—Ü—ã –ë–î']
  
  for (const tab of requiredTabs) {
    if (!html.includes(tab)) {
      throw new Error(`–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∫–ª–∞–¥–∫—É: ${tab}`)
    }
  }
}, 'admin')

// ============================================================================
// –¢–ï–°–¢–´ –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

testSuite.addTest('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ì–æ—Å—Ç–∞–≥–∞–µ–≤—Å–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
  const testAddress = '–ì–æ—Å—Ç–∞–≥–∞–µ–≤—Å–∫–∞—è'
  const response = await fetch(`${testSuite.baseUrl}/api/geocode?address=${encodeURIComponent(testAddress)}`)
  
  if (!response.ok) {
    throw new Error('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ì–æ—Å—Ç–∞–≥–∞–µ–≤—Å–∫–æ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
  }
  
  const data = await response.json()
  if (!data.latitude || !data.longitude) {
    throw new Error('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ì–æ—Å—Ç–∞–≥–∞–µ–≤—Å–∫–æ–π
  const expectedLat = 45.02063
  const expectedLng = 37.50175
  const tolerance = 0.01
  
  if (Math.abs(data.latitude - expectedLat) > tolerance || 
      Math.abs(data.longitude - expectedLng) > tolerance) {
    throw new Error(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ì–æ—Å—Ç–∞–≥–∞–µ–≤—Å–∫–æ–π. –û–∂–∏–¥–∞–ª–∏—Å—å: ${expectedLat}, ${expectedLng}, –ø–æ–ª—É—á–µ–Ω—ã: ${data.latitude}, ${data.longitude}`)
  }
}, 'geocoding')

testSuite.addTest('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
  const testAddress = '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫'
  const response = await fetch(`${testSuite.baseUrl}/api/geocode?address=${encodeURIComponent(testAddress)}`)
  
  if (!response.ok) {
    throw new Error('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
  }
  
  const data = await response.json()
  if (!data.latitude || !data.longitude) {
    throw new Error('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
  }
}, 'geocoding')

testSuite.addTest('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–Ω–∞–ø—ã —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
  const testAddress = '–ê–Ω–∞–ø–∞'
  const response = await fetch(`${testSuite.baseUrl}/api/geocode?address=${encodeURIComponent(testAddress)}`)
  
  if (!response.ok) {
    throw new Error('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–Ω–∞–ø—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
  }
  
  const data = await response.json()
  if (!data.latitude || !data.longitude) {
    throw new Error('–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–Ω–∞–ø—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
  }
}, 'geocoding')

// ============================================================================
// –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
// ============================================================================

testSuite.addTest('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ', async () => {
  const startTime = Date.now()
  await testSuite.fetchPage(testSuite.baseUrl)
  const loadTime = Date.now() - startTime
  
  if (loadTime > 3000) {
    throw new Error(`–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: ${loadTime}ms`)
  }
}, 'performance')

testSuite.addTest('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ', async () => {
  const startTime = Date.now()
  await testSuite.fetchPage(`${testSuite.baseUrl}/search`)
  const loadTime = Date.now() - startTime
  
  if (loadTime > 5000) {
    throw new Error(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: ${loadTime}ms`)
  }
}, 'performance')

// ============================================================================
// –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
// ============================================================================

testSuite.addTest('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞', async () => {
  // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  const response = await fetch(`${testSuite.baseUrl}/admin`, {
    redirect: 'manual'
  })
  
  if (response.status !== 302 && response.status !== 401) {
    throw new Error('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –Ω–µ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')
  }
}, 'security')

testSuite.addTest('API endpoints –∑–∞—â–∏—â–µ–Ω—ã', async () => {
  const protectedEndpoints = [
    '/api/admin/database-stats',
    '/api/admin/database-tables'
  ]
  
  for (const endpoint of protectedEndpoints) {
    const response = await fetch(`${testSuite.baseUrl}${endpoint}`, {
      redirect: 'manual'
    })
    
    if (response.status !== 401 && response.status !== 403) {
      throw new Error(`API endpoint ${endpoint} –Ω–µ –∑–∞—â–∏—â–µ–Ω`)
    }
  }
}, 'security')

// ============================================================================
// –¢–ï–°–¢–´ –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò
// ============================================================================

testSuite.addTest('–°–∞–π—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤', async () => {
  const response = await testSuite.fetchPage(testSuite.baseUrl)
  const html = await response.text()
  
  if (!html.includes('viewport')) {
    throw new Error('–°–∞–π—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞-—Ç–µ–≥ viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
  }
}, 'responsive')

// ============================================================================
// –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í
// ============================================================================

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ Node.js
if (typeof module !== 'undefined' && module.exports) {
  module.exports = testSuite
} else if (typeof window !== 'undefined') {
  window.TestSuite = testSuite
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
  console.log('üß™ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ testSuite.runAllTests() –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.')
}




