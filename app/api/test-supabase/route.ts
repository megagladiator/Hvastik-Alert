import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function GET(request: NextRequest) {
  try {
    console.log('üîç Testing Supabase connection...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envCheck = {
      SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL ? 'present' : 'missing',
      SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'present' : 'missing',
      NODE_ENV: process.env.NODE_ENV
    }
    
    console.log('üîç Environment variables:', envCheck)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabaseCheck = {
      isNull: supabase === null,
      isUndefined: supabase === undefined,
      hasAuth: supabase?.auth ? 'present' : 'missing',
      hasFrom: supabase?.from ? 'present' : 'missing'
    }
    
    console.log('üîç Supabase client:', supabaseCheck)
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    let testResult = 'not attempted'
    if (supabase) {
      try {
        const { data, error } = await supabase.from('pets').select('count').limit(1)
        testResult = error ? `error: ${error.message}` : 'success'
      } catch (err: any) {
        testResult = `exception: ${err.message}`
      }
    }
    
    return NextResponse.json({
      success: true,
      environment: envCheck,
      supabase: supabaseCheck,
      testResult,
      message: 'Supabase test completed'
    })
    
  } catch (error: any) {
    console.error('‚ùå Error in Supabase test:', error)
    return NextResponse.json({ 
      error: 'Error testing Supabase',
      details: error.message,
      stack: error.stack
    }, { status: 500 })
  }
}
