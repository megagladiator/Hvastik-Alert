import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Password reset API called')
    
    const body = await request.json()
    const { newPassword } = body

    console.log('üîç Request body:', { newPassword: newPassword ? 'present' : 'missing' })

    if (!newPassword) {
      console.log('‚ùå No password provided')
      return NextResponse.json({ 
        error: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      }, { status: 400 })
    }

    if (newPassword.length < 6) {
      console.log('‚ùå Password too short')
      return NextResponse.json({ 
        error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' 
      }, { status: 400 })
    }

    console.log('‚úÖ Basic validation passed')

    // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–î–•–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º verifyOtp –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    console.log('üîÑ Verifying OTP and updating password...')
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω —Å –∫–ª–∏–µ–Ω—Ç–∞)
      const url = new URL(request.url)
      const token = url.searchParams.get('token')
      const type = url.searchParams.get('type') || 'recovery'
      
      console.log('üîç Token from URL:', { token: token ? 'present' : 'missing', type })
      
      if (!token) {
        return NextResponse.json({ 
          error: '–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ email.' 
        }, { status: 400 })
      }
      
      // –°–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const { error: verifyError } = await supabase.auth.verifyOtp({
        token_hash: token,
        type: type as any
      })
      
      if (verifyError) {
        console.error('‚ùå Error verifying OTP:', verifyError)
        return NextResponse.json({ 
          error: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.' 
        }, { status: 400 })
      }
      
      console.log('‚úÖ OTP verified successfully')
      
      // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      const { error: updateError } = await supabase.auth.updateUser({
        password: newPassword
      })

      if (updateError) {
        console.error('‚ùå Error updating password:', updateError)
        
        if (updateError.message.includes('Password should be at least')) {
          return NextResponse.json({ 
            error: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
          }, { status: 400 })
        }
        
        return NextResponse.json({ 
          error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è',
          details: updateError.message 
        }, { status: 500 })
      }

      console.log('‚úÖ Password updated successfully')
    } catch (updateError: any) {
      console.error('‚ùå Exception updating password:', updateError)
      return NextResponse.json({ 
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è',
        details: updateError.message 
      }, { status: 500 })
    }
    return NextResponse.json({
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      success: true
    })

  } catch (error: any) {
    console.error('‚ùå Error in reset password API:', error)
    console.error('‚ùå Error stack:', error.stack)
    console.error('‚ùå Error details:', {
      message: error.message,
      name: error.name,
      cause: error.cause
    })
    
    return NextResponse.json({ 
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è',
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 })
  }
}

