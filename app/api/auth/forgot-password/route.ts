import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import { supabaseServer } from '@/lib/supabase-server'
import { getAuthUrl } from '@/lib/url-utils'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { email } = body

    console.log('üîç Forgot password request for:', email)
    console.log('üîç Supabase client:', !!supabase)
    console.log('üîç Supabase server client:', !!supabaseServer)
    console.log('üîç Environment check:')
    console.log('  - NEXT_PUBLIC_SUPABASE_URL:', !!process.env.NEXT_PUBLIC_SUPABASE_URL)
    console.log('  - NEXT_PUBLIC_SUPABASE_ANON_KEY:', !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)
    console.log('  - SUPABASE_SERVICE_ROLE_KEY:', !!process.env.SUPABASE_SERVICE_ROLE_KEY)

    if (!email) {
      console.error('‚ùå Email is required')
      return NextResponse.json({ error: 'Email is required' }, { status: 400 })
    }

    if (!supabase) {
      console.error('‚ùå Supabase client is null')
      return NextResponse.json({ error: 'Supabase not initialized' }, { status: 500 })
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ admin API, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
    // Supabase —Å–∞–º –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    console.log('üîç Skipping user existence check via admin API')

    // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ callback
    let resetUrl = getAuthUrl('/auth/callback', request)
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω URL –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ localhost
    if (!resetUrl.includes('localhost') && !resetUrl.includes('127.0.0.1')) {
      resetUrl = 'https://hvostikalert.ru/auth/callback'
    }
    
    console.log('üîó Reset URL:', resetUrl)
    console.log('üîç Environment check:', {
      NODE_ENV: process.env.NODE_ENV,
      VERCEL_URL: process.env.VERCEL_URL,
      NEXTAUTH_URL: process.env.NEXTAUTH_URL
    })
    console.log('üîç Request headers:', {
      origin: request.headers.get('origin'),
      host: request.headers.get('host'),
      'x-forwarded-proto': request.headers.get('x-forwarded-proto'),
      'x-forwarded-host': request.headers.get('x-forwarded-host')
    })
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    console.log('üìß Sending password reset email...')
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: resetUrl,
    })
    
    console.log('üìß Password reset request result:', { email, resetUrl, error: error?.message })

    if (error) {
      console.error('Error sending password reset email:', error)
      
      if (error.message.includes('User not found') || error.message.includes('not found')) {
        return NextResponse.json({ 
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É —Å–∞–π—Ç–∞.' 
        }, { status: 404 })
      }
      
      if (error.message.includes('Invalid email')) {
        return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' }, { status: 400 })
      }
      
      if (error.message.includes('Too many requests') || error.message.includes('rate limit')) {
        return NextResponse.json({ error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' }, { status: 429 })
      }
      
      return NextResponse.json({ 
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
        details: error.message 
      }, { status: 500 })
    }

    return NextResponse.json({
      message: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ email',
      success: true
    })

  } catch (error: any) {
    console.error('‚ùå Error in forgot password API:', error)
    console.error('‚ùå Error stack:', error.stack)
    return NextResponse.json({ 
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 })
  }
}

