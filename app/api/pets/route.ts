import { NextRequest, NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabase-admin'
import { v5 as uuidv5 } from 'uuid'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID –∏–∑ NextAuth.js ID
const generateUserId = (nextAuthId: string | undefined): string | null => {
  if (!nextAuthId) return null
  const namespace = '6ba7b810-9dad-11d1-80b4-00c04fd430c8'
  return uuidv5(nextAuthId, namespace)
}

export async function POST(request: NextRequest) {
  try {
    if (!supabaseAdmin) {
      return NextResponse.json(
        { error: '–ê–¥–º–∏–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      )
    }

    const body = await request.json()
    const { petData, userId, editId } = body

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –Ω–∞–ø—Ä—è–º—É—é (—ç—Ç–æ —É–∂–µ Supabase user.id)
    const finalPetData = {
      ...petData,
      user_id: userId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase user.id –Ω–∞–ø—Ä—è–º—É—é
    }

    console.log('üìù API: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', {
      editId: editId,
      finalPetData: finalPetData,
      photo_url: finalPetData.photo_url
    })

    let data, error

    if (editId) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      const { data: updateData, error: updateError } = await supabaseAdmin
        .from('pets')
        .update(finalPetData)
        .eq('id', editId)
        .select()

      data = updateData
      error = updateError
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const { data: insertData, error: insertError } = await supabaseAdmin
        .from('pets')
        .insert([finalPetData])
        .select()

      data = insertData
      error = insertError
    }

    if (error) {
      console.error('Supabase error:', error)
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      )
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if (!editId && data && data[0]) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const userEmail = body.userEmail || null
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        const notifyResponse = await fetch(`${request.nextUrl.origin}/api/admin/notify-new-pet`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            petData: data[0],
            userEmail: userEmail
          })
        })

        if (!notifyResponse.ok) {
          console.error('Failed to notify admin:', await notifyResponse.text())
        } else {
          console.log('Admin notification sent successfully')
        }
      } catch (notifyError) {
        console.error('Error sending admin notification:', notifyError)
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }
    }

    return NextResponse.json({ data: data[0] })
  } catch (error: any) {
    console.error('API error:', error)
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    )
  }
}
