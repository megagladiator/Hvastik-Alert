import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º route –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
export const dynamic = 'force-dynamic'

// –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ñ–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–∫—à–Ω URL
const PRODUCTION_URL = 'https://hvostikalert.ru'

export async function GET(request: Request) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  const token = requestUrl.searchParams.get('token')
  const type = requestUrl.searchParams.get('type')

  console.log('üîç Auth Callback Route Handler - Processing...')
  console.log('Full URL:', requestUrl.href)
  console.log('Parameters:', { code: code ? 'Found' : 'Not found', token: token ? 'Found' : 'Not found', type })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ PKCE flow (code parameter)
  if (code) {
    try {
      const supabase = createClient()
      
      console.log('üîÑ Exchanging code for session (PKCE flow)...')
      const { data, error } = await supabase.auth.exchangeCodeForSession(code)
      
      if (error) {
        console.error('‚ùå Error exchanging code for session:', error)
        return NextResponse.redirect(new URL('/auth/error?message=' + encodeURIComponent(error.message), PRODUCTION_URL))
      }
      
      console.log('‚úÖ Code exchanged for session successfully')
      console.log('User:', data.user?.email)
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–∫—à–Ω URL
      return NextResponse.redirect(new URL('/auth/reset-password', PRODUCTION_URL))
      
    } catch (err) {
      console.error('‚ùå Exception in callback route:', err)
      return NextResponse.redirect(new URL('/auth/error?message=' + encodeURIComponent('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏'), PRODUCTION_URL))
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Recovery/Magic Link flow (token parameter)
  if (token && type) {
    try {
      const supabase = createClient()
      
      console.log('üîÑ Verifying token with type:', type)
      const { data, error } = await supabase.auth.verifyOtp({
        token_hash: token,
        type: type as any
      })
      
      if (error) {
        console.error('‚ùå Error verifying token:', error)
        return NextResponse.redirect(new URL('/auth/error?message=' + encodeURIComponent(error.message), PRODUCTION_URL))
      }
      
      console.log('‚úÖ Token verified successfully')
      console.log('User:', data.user?.email)
      console.log('Token type:', type)
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–∫—à–Ω URL
      return NextResponse.redirect(new URL('/auth/reset-password', PRODUCTION_URL))
      
    } catch (err) {
      console.error('‚ùå Exception verifying token:', err)
      return NextResponse.redirect(new URL('/auth/error?message=' + encodeURIComponent('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏'), PRODUCTION_URL))
    }
  }

  console.error('‚ùå No valid parameters found in callback URL')
  return NextResponse.redirect(new URL('/auth/error?message=' + encodeURIComponent('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è'), PRODUCTION_URL))
}
