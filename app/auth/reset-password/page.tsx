"use client"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import Link from "next/link"
import { supabase } from "@/lib/supabase"

export default function ResetPasswordPage() {
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [success, setSuccess] = useState(false)
  const [accessToken, setAccessToken] = useState("")
  const [refreshToken, setRefreshToken] = useState("")
  const [isCodeHandled, setIsCodeHandled] = useState(false)
  const router = useRouter()
  const searchParams = useSearchParams()

  useEffect(() => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞
    if (isCodeHandled) {
      console.log('üîç Code already handled, skipping...')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º code –∏–∑ URL –∏—Å–ø–æ–ª—å–∑—É—è Next.js router
    const code = searchParams.get('code') || new URLSearchParams(window.location.search).get('code')
    
    console.log('üîç Password reset page loaded')
    console.log('üîç Code:', code ? 'present' : 'missing')
    console.log('üîç Search:', window.location.search)
    console.log('üîç Full URL:', window.location.href)
    
    if (!code) {
      console.log('‚ùå No code found in URL')
      setError('–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ email.')
      setIsCodeHandled(true)
      return
    }
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º PKCE —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    async function handleCode() {
      try {
        console.log('üîÑ Verifying PKCE token...')
        const { error } = await supabase.auth.verifyOtp({
          token_hash: code,
          type: 'recovery'
        })
        
        if (error) {
          console.error('‚ùå Error verifying token:', error)
          setError('–û—à–∏–±–∫–∞: ' + error.message)
          setIsCodeHandled(true)
          return
        }
        
        console.log('‚úÖ Token verified successfully')
        setAccessToken('session-ready')
        setRefreshToken('session-ready')
        setIsCodeHandled(true)
      } catch (err: any) {
        console.error('‚ùå Exception verifying token:', err)
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è')
        setIsCodeHandled(true)
      }
    }
    
    handleCode()
  }, [searchParams, isCodeHandled])

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setError("")
    
    if (password !== confirmPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
      return
    }
    
    if (password.length < 6) {
      setError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
      return
    }
    
    // –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ü–û–î–•–û–î SUPABASE: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã, Supabase —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–µ—Å—Å–∏—é
    
    setLoading(true)
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å (—Å–µ—Å—Å–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ exchangeCodeForSession)
      console.log('üîç Updating password...')
      
      const { error } = await supabase.auth.updateUser({
        password: password
      })

      if (error) {
        console.error('‚ùå Error updating password:', error)
        setError(error.message)
        return
      }

      console.log('‚úÖ Password updated successfully')
      setSuccess(true)
      
    } catch (error: any) {
      console.error('‚ùå Exception updating password:', error)
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è')
    }
    
    setLoading(false)
  }

  if (success) {
    return (
      <div className="max-w-md w-full mx-auto mt-10 p-6 bg-white rounded-lg shadow-lg">
        <div className="text-center">
          <div className="text-green-600 text-4xl mb-4">‚úì</div>
          <h2 className="text-xl font-bold mb-4 text-green-600">–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</h2>
          <p className="text-gray-600 mb-6">
            –í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.
          </p>
          
          <Link 
            href="/auth" 
            className="block w-full bg-orange-500 hover:bg-orange-600 text-white py-2 rounded text-center"
          >
            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </Link>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="max-w-md w-full mx-auto mt-10 p-6 bg-white rounded-lg shadow-lg">
        <div className="text-center">
          <div className="text-red-600 text-4xl mb-4">‚ö†</div>
          <h2 className="text-xl font-bold mb-4 text-red-600">–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞</h2>
          <p className="text-gray-600 mb-6">
            {error}
          </p>
          
          <div className="space-y-2">
            <Link 
              href="/auth/forgot-password" 
              className="block w-full bg-orange-500 hover:bg-orange-600 text-white py-2 rounded text-center"
            >
              –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
            </Link>
            <Link 
              href="/auth" 
              className="block w-full bg-gray-500 hover:bg-gray-600 text-white py-2 rounded text-center"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
            </Link>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="max-w-md w-full mx-auto mt-10 p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-xl font-bold mb-4">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</h2>
      <p className="text-gray-600 mb-6">
        –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      </p>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ email –¥–ª—è accessibility –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π */}
        <input
          type="email"
          name="email"
          autoComplete="username"
          style={{ display: 'none' }}
          tabIndex={-1}
        />
        
        <input
          type="password"
          placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
          value={password}
          onChange={e => setPassword(e.target.value)}
          required
          autoComplete="new-password"
          name="password"
          id="password"
          className="w-full border rounded px-3 py-2"
          disabled={loading}
          minLength={6}
        />
        
        <input
          type="password"
          placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
          value={confirmPassword}
          onChange={e => setConfirmPassword(e.target.value)}
          required
          autoComplete="new-password"
          name="confirm-password"
          id="confirm-password"
          className="w-full border rounded px-3 py-2"
          disabled={loading}
          minLength={6}
        />
        
        {error && (
          <div className="text-red-500 text-sm p-3 bg-red-50 border border-red-200 rounded-lg">
            <div className="font-medium mb-1">–û—à–∏–±–∫–∞:</div>
            <div>{error}</div>
          </div>
        )}
        
        <button 
          type="submit" 
          className="w-full bg-orange-500 hover:bg-orange-600 text-white py-2 rounded" 
          disabled={loading}
        >
          {loading ? "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"}
        </button>
        
        <div className="text-center">
          <Link href="/auth" className="text-blue-600 underline">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
          </Link>
        </div>
      </form>
    </div>
  )
}
