"use client"

import { useState, useRef } from "react"
import { supabase } from "@/lib/supabase"
import { useRouter } from "next/navigation"
import Link from "next/link"

export default function AuthPage() {
  const [mode, setMode] = useState<"login" | "register">("login")
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [repeatPassword, setRepeatPassword] = useState("")
  const [error, setError] = useState("")
  const [loading, setLoading] = useState(false)
  const [info, setInfo] = useState("")
  const emailInputRef = useRef<HTMLInputElement>(null)
  const passwordInputRef = useRef<HTMLInputElement>(null)
  const repeatPasswordInputRef = useRef<HTMLInputElement>(null)
  const router = useRouter()

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setError("")
    setInfo("")
    if (!supabase) {
      setError("Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
      setLoading(false)
      return
    }
    if (mode === "register" && password !== repeatPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
      return
    }
    setLoading(true)
    if (mode === "login") {
      // –í—Ö–æ–¥
      const { error: loginError } = await supabase.auth.signInWithPassword({ email, password })
      if (loginError) {
        const errorMessage = loginError.message.toLowerCase()
        if (
          errorMessage.includes("invalid login credentials") ||
          errorMessage.includes("invalid email or password") ||
          errorMessage.includes("invalid credentials")
        ) {
          setError("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        } else if (errorMessage.includes("email not confirmed")) {
          setError("Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        } else {
          setError(loginError.message)
        }
      } else {
        setInfo("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        router.push("/cabinet")
      }
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
      const { error: regError } = await supabase.auth.signUp({ email, password })
      if (regError) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        const errorMessage = regError.message.toLowerCase()
        if (
          errorMessage.includes("already registered") ||
          errorMessage.includes("user already exists") ||
          errorMessage.includes("email already") ||
          errorMessage.includes("already exists") ||
          errorMessage.includes("duplicate key") ||
          errorMessage.includes("unique constraint") ||
          errorMessage.includes("email is already") ||
          errorMessage.includes("user with this email") ||
          regError.message.includes("User already registered") ||
          regError.message.includes("Email already registered")
        ) {
          setError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º e-mail —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å.")
        } else {
          setError(regError.message)
        }
      } else {
        setInfo("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É '–°–ø–∞–º' –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π e-mail. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        setMode("login")
      }
    }
    setLoading(false)
  }

  async function handleResendConfirmation() {
    setError("")
    setInfo("")
    
    if (!email.trim()) {
      setError("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
      return
    }
    
    if (!supabase) {
      setError("Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
      return
    }
    
    setLoading(true)
    try {
      const { error: resendError } = await supabase.auth.resend({
        type: 'signup',
        email: email
      })
      
      if (resendError) {
        console.error("Resend confirmation error:", resendError)
        if (resendError.message.includes("User not found")) {
          setError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω")
        } else if (resendError.message.includes("Too many requests")) {
          setError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        } else {
          setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: ${resendError.message}`)
        }
      } else {
        setInfo("–ü–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–∞–ø–∫—É '–°–ø–∞–º'")
      }
    } catch (error) {
      console.error("Unexpected error during resend:", error)
      setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    } finally {
      setLoading(false)
    }
  }

  async function handleResetPassword() {
    setError("")
    setInfo("")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –≤–≤–µ–¥–µ–Ω
    if (!email.trim()) {
      setError("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
      return
    }
    
    if (!supabase) {
      setError("Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
      return
    }
    
    setLoading(true)
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞
      const currentUrl = window.location.origin
      const resetUrl = `${currentUrl}/auth/reset-password`
      
      const { error: resetError } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: resetUrl
      })
      
      if (resetError) {
        console.error("Reset password error:", resetError)
        if (resetError.message.includes("User not found")) {
          setError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω")
        } else if (resetError.message.includes("Too many requests")) {
          setError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        } else {
          setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: ${resetError.message}`)
        }
      } else {
        setInfo("–ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–∞–ø–∫—É '–°–ø–∞–º'")
      }
    } catch (error) {
      console.error("Unexpected error during password reset:", error)
      setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="max-w-md w-full mx-auto mt-10 p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-xl font-bold mb-4">{mode === "register" ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" : "–í—Ö–æ–¥"}</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="email"
          placeholder="E-mail"
          value={email}
          onChange={e => setEmail(e.target.value)}
          required
          autoComplete="username"
          name="email"
          id="email"
          className="w-full border rounded px-3 py-2"
          ref={emailInputRef}
          disabled={loading}
        />
        <input
          type="password"
          placeholder="–ü–∞—Ä–æ–ª—å"
          value={password}
          onChange={e => setPassword(e.target.value)}
          required
          autoComplete="current-password"
          name="password"
          id="password"
          className="w-full border rounded px-3 py-2"
          ref={passwordInputRef}
          disabled={loading}
        />
        {mode === "register" && (
          <input
            type="password"
            placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            value={repeatPassword}
            onChange={e => setRepeatPassword(e.target.value)}
            required
            autoComplete="new-password"
            name="repeat-password"
            id="repeat-password"
            className="w-full border rounded px-3 py-2"
            ref={repeatPasswordInputRef}
            disabled={loading}
          />
        )}
        {error && (
          <div className="text-red-500 text-sm p-3 bg-red-50 border border-red-200 rounded-lg">
            <div className="font-medium mb-1">–û—à–∏–±–∫–∞:</div>
            <div>{error}</div>
            {error.includes("Invalid login credentials") && (
              <div className="mt-2 text-xs">
                üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
                <ul className="list-disc list-inside mt-1">
                  <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏ –ø–∞—Ä–æ–ª—è</li>
                  <li>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç</li>
                  <li>–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏</li>
                </ul>
              </div>
            )}
            {error.includes("—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç") && (
              <div className="mt-2 text-xs">
                üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
                <ul className="list-disc list-inside mt-1">
                  <li>–í–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç</li>
                  <li>–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏</li>
                  <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π email</li>
                </ul>
              </div>
            )}
            {error.includes("–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω") && (
              <div className="mt-2 text-xs">
                üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
                <ul className="list-disc list-inside mt-1">
                  <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</li>
                  <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–ø–∫—É "–°–ø–∞–º"</li>
                  <li>–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞</li>
                  <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π email</li>
                </ul>
              </div>
            )}
          </div>
        )}
        {info && <div className="text-green-600 text-sm p-3 bg-green-50 border border-green-200 rounded-lg">{info}</div>}
        <button type="submit" className="w-full bg-orange-500 hover:bg-orange-600 text-white py-2 rounded" disabled={loading}>
          {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : mode === "register" ? "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–í–æ–π—Ç–∏"}
        </button>
        {mode === "login" && (
          <div className="text-right">
            <button type="button" className="text-blue-600 underline text-sm" onClick={handleResetPassword} disabled={loading || !email}>
              –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
            </button>
          </div>
        )}
        <div className="mt-4 text-center">
          {mode === "register" ? (
            <span>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <button className="text-blue-600 underline" type="button" onClick={() => setMode("login")}>–í–æ–π—Ç–∏</button></span>
          ) : (
            <span>–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <button className="text-blue-600 underline" type="button" onClick={() => setMode("register")}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button></span>
          )}
        </div>
      </form>
    </div>
  )
} 