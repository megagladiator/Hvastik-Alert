import { NextResponse } from 'next/server'

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url)
    const address = searchParams.get('address')

    if (!address) {
      return NextResponse.json({ error: '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω' }, { status: 400 })
    }

    console.log('üîç API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ —Ñ–æ—Ä–º–µ
    const normalizedAddress = address.trim().replace(/\s+/g, ' ')
    let found = false
    let coordinates = null
    let locationName = ''

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    const searchVariants = [
      normalizedAddress,
      `${normalizedAddress}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π, –†–æ—Å—Å–∏—è`,
      `${normalizedAddress}, –†–æ—Å—Å–∏—è`,
      `—Å—Ç–∞–Ω–∏—Ü–∞ ${normalizedAddress}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π, –†–æ—Å—Å–∏—è`,
      `—Å–µ–ª–æ ${normalizedAddress}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π, –†–æ—Å—Å–∏—è`,
      `—Ö—É—Ç–æ—Ä ${normalizedAddress}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π, –†–æ—Å—Å–∏—è`,
      `–ø–æ—Å–µ–ª–æ–∫ ${normalizedAddress}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π, –†–æ—Å—Å–∏—è`
    ]

    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞
    for (const searchQuery of searchVariants) {
      if (found) break

      try {
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&addressdetails=1&countrycodes=ru`
        const response = await fetch(url)

        if (!response.ok) {
          continue
        }

        const data = await response.json()

        if (data && data.length > 0) {
          const result = data[0]
          coordinates = {
            latitude: parseFloat(result.lat),
            longitude: parseFloat(result.lon)
          }
          locationName = result.display_name
          found = true
          break
        }
      } catch (searchError) {
        continue
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ Nominatim, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!found) {
      const lowerAddress = normalizedAddress.toLowerCase()

      if (lowerAddress.includes('–≥–æ—Å—Ç–∞–≥–∞–µ–≤—Å–∫–∞—è')) {
        coordinates = { latitude: 45.02063, longitude: 37.50175 }
        locationName = '–ì–æ—Å—Ç–∞–≥–∞–µ–≤—Å–∫–∞—è'
      } else if (lowerAddress.includes('–≤–∞—Ä–µ–Ω–∏–∫–æ–≤—Å–∫–∞—è')) {
        coordinates = { latitude: 45.12085, longitude: 37.64171 }
        locationName = '–í–∞—Ä–µ–Ω–∏–∫–æ–≤—Å–∫–∞—è'
      } else if (lowerAddress.includes('–Ω–∞—Ç—É—Ö–∞–µ–≤—Å–∫–∞—è')) {
        coordinates = { latitude: 45.0, longitude: 37.6 }
        locationName = '–ù–∞—Ç—É—Ö–∞–µ–≤—Å–∫–∞—è'
      } else if (lowerAddress.includes('–Ω–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫')) {
        coordinates = { latitude: 44.7239, longitude: 37.7708 }
        locationName = '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫'
      } else if (lowerAddress.includes('–∞–Ω–∞–ø–∞')) {
        coordinates = { latitude: 44.8951, longitude: 37.3142 }
        locationName = '–ê–Ω–∞–ø–∞'
      } else if (lowerAddress.includes('–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä')) {
        coordinates = { latitude: 45.0448, longitude: 38.976 }
        locationName = '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
      } else if (lowerAddress.includes('—Å–æ—á–∏')) {
        coordinates = { latitude: 43.5855, longitude: 39.7231 }
        locationName = '–°–æ—á–∏'
      } else if (lowerAddress.includes('–≥–µ–ª–µ–Ω–¥–∂–∏–∫')) {
        coordinates = { latitude: 44.5622, longitude: 38.0768 }
        locationName = '–ì–µ–ª–µ–Ω–¥–∂–∏–∫'
      }
    }

    if (coordinates) {
      return NextResponse.json({
        success: true,
        address: address,
        location: locationName,
        latitude: coordinates.latitude,
        longitude: coordinates.longitude,
        found: found
      })
    } else {
      return NextResponse.json({
        success: false,
        error: '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        address: address
      }, { status: 404 })
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 })
  }
}




