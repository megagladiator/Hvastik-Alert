import { NextRequest, NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabase-admin'

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞')
    
    if (!supabaseAdmin) {
      console.error('‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return NextResponse.json(
        { error: '–ê–¥–º–∏–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      )
    }

    const formData = await request.formData()
    const file = formData.get('file') as File

    console.log('üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω:', {
      name: file?.name,
      type: file?.type,
      size: file?.size
    })

    if (!file) {
      console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ')
      return NextResponse.json(
        { error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type || !file.type.startsWith('image/')) {
      return NextResponse.json(
        { error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      return NextResponse.json(
        { error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB' },
        { status: 400 }
      )
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now()
    const randomString = Math.random().toString(36).substring(2, 15)
    const fileExtension = file.name.split('.').pop()
    const fileName = `pet-${timestamp}-${randomString}.${fileExtension}`

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ ArrayBuffer
    const arrayBuffer = await file.arrayBuffer()
    const uint8Array = new Uint8Array(arrayBuffer)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ bucket, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
    const { data: buckets } = await supabaseAdmin.storage.listBuckets()
    const bucketExists = buckets?.some(bucket => bucket.name === 'pet-photos')
    
    if (!bucketExists) {
      console.log('üì¶ –°–æ–∑–¥–∞–µ–º bucket "pet-photos"...')
      const { error: bucketError } = await supabaseAdmin.storage.createBucket('pet-photos', {
        public: true,
        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
        fileSizeLimit: 5242880, // 5MB
      })
      
      if (bucketError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:', bucketError)
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞' },
          { status: 500 }
        )
      }
      console.log('‚úÖ Bucket "pet-photos" —Å–æ–∑–¥–∞–Ω')
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
    const { data, error } = await supabaseAdmin.storage
      .from('pet-photos')
      .upload(fileName, uint8Array, {
        contentType: file.type,
        cacheControl: '3600',
        upsert: false
      })

    if (error) {
      console.error('‚ùå Supabase Storage error:', error)
      return NextResponse.json(
        { error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${error.message}` },
        { status: 500 }
      )
    }

    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:', data)

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: urlData } = supabaseAdmin.storage
      .from('pet-photos')
      .getPublicUrl(fileName)

    return NextResponse.json({ 
      success: true,
      fileName: data.path,
      url: urlData.publicUrl
    })

  } catch (error: any) {
    console.error('Upload error:', error)
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    )
  }
}
