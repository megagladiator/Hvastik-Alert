"use client"

import { useState, useEffect } from "react"
import { supabase } from "@/lib/supabase"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"

interface TestResult {
  name: string
  status: "pending" | "running" | "success" | "error" | "warning"
  message: string
  details?: any
  duration?: number
}

export default function SupabaseTestDashboard() {
  const [tests, setTests] = useState<TestResult[]>([
    { name: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase", status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" },
    { name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" },
    { name: "–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã pets", status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" },
    { name: "–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã messages", status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" },
    { name: "–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã app_settings", status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" },
    { name: "–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" },
    { name: "–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π", status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" }
  ])
  const [isRunning, setIsRunning] = useState(false)
  const [overallStatus, setOverallStatus] = useState<"pending" | "running" | "success" | "error" | "warning">("pending")

  const updateTest = (name: string, status: TestResult["status"], message: string, details?: any, duration?: number) => {
    setTests(prev => prev.map(test => 
      test.name === name 
        ? { ...test, status, message, details, duration }
        : test
    ))
  }

  const runAllTests = async () => {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    setIsRunning(true)
    setOverallStatus("running")
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    setTests(prev => prev.map(test => ({ ...test, status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" })))

    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
      updateTest("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", "running", "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...")
      await new Promise(resolve => setTimeout(resolve, 500)) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      
      const envVars = {
        url: process.env.NEXT_PUBLIC_SUPABASE_URL,
        key: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
      }
      
      if (!envVars.url || !envVars.key) {
        updateTest("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", "error", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", envVars)
      } else if (envVars.url.includes("placeholder")) {
        updateTest("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", "warning", "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è placeholder –∑–Ω–∞—á–µ–Ω–∏—è", envVars)
      } else {
        updateTest("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", "success", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", envVars)
      }

    // –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    updateTest("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase", "running", "–°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç...")
    const startTime2 = Date.now()
    
    if (!supabase) {
      updateTest("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase", "error", "–ö–ª–∏–µ–Ω—Ç Supabase –Ω–µ —Å–æ–∑–¥–∞–Ω", null, Date.now() - startTime2)
      setIsRunning(false)
      setOverallStatus("error")
      return
    }
    
    updateTest("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase", "success", "–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ", null, Date.now() - startTime2)

    // –¢–µ—Å—Ç 3: –¢–∞–±–ª–∏—Ü–∞ pets
    updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã pets", "running", "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É pets...")
    const startTime3 = Date.now()
    
    try {
      const { data, error } = await supabase
        .from("pets")
        .select("*")
        .limit(5)
      
      if (error) {
        updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã pets", "error", `–û—à–∏–±–∫–∞: ${error.message}`, { code: error.code }, Date.now() - startTime3)
      } else {
        updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã pets", "success", `–ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`, { count: data?.length, sample: data?.[0] }, Date.now() - startTime3)
      }
    } catch (err: any) {
      updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã pets", "error", `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`, null, Date.now() - startTime3)
    }

    // –¢–µ—Å—Ç 4: –¢–∞–±–ª–∏—Ü–∞ messages
    updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã messages", "running", "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É messages...")
    const startTime4 = Date.now()
    
    try {
      const { data, error } = await supabase
        .from("messages")
        .select("*")
        .limit(5)
      
      if (error) {
        updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã messages", "error", `–û—à–∏–±–∫–∞: ${error.message}`, { code: error.code }, Date.now() - startTime4)
      } else {
        updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã messages", "success", `–ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`, { count: data?.length, sample: data?.[0] }, Date.now() - startTime4)
      }
    } catch (err: any) {
      updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã messages", "error", `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`, null, Date.now() - startTime4)
    }

    // –¢–µ—Å—Ç 5: –¢–∞–±–ª–∏—Ü–∞ app_settings
    updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã app_settings", "running", "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É app_settings...")
    const startTime5 = Date.now()
    
    try {
      const { data, error } = await supabase
        .from("app_settings")
        .select("*")
        .limit(1)
      
      if (error) {
        updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã app_settings", "error", `–û—à–∏–±–∫–∞: ${error.message}`, { code: error.code }, Date.now() - startTime5)
      } else {
        updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã app_settings", "success", `–ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`, { count: data?.length, data: data?.[0] }, Date.now() - startTime5)
      }
    } catch (err: any) {
      updateTest("–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã app_settings", "error", `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`, null, Date.now() - startTime5)
    }

    // –¢–µ—Å—Ç 6: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    updateTest("–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "running", "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    const startTime6 = Date.now()
    
    try {
      const { data: { user }, error } = await supabase.auth.getUser()
      
      if (error) {
        updateTest("–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "warning", `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`, { code: error.code }, Date.now() - startTime6)
      } else if (user) {
        updateTest("–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "success", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", { userId: user.id, email: user.email }, Date.now() - startTime6)
      } else {
        updateTest("–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "success", "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)", null, Date.now() - startTime6)
      }
    } catch (err: any) {
      updateTest("–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "error", `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`, null, Date.now() - startTime6)
    }

    // –¢–µ—Å—Ç 7: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    updateTest("–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π", "running", "–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –∑–∞–ø–∏—Å–∏...")
    const startTime7 = Date.now()
    
    try {
      const testData = {
        name: `–¢–µ—Å—Ç ${Date.now()}`,
        species: "–¢–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥",
        description: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CRUD",
        location: "–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        contact: "test@example.com",
        status: "active",
        created_at: new Date().toISOString()
      }

      const { data, error } = await supabase
        .from("pets")
        .insert([testData])
        .select()

      if (error) {
        updateTest("–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π", "error", `–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: ${error.message}`, { code: error.code }, Date.now() - startTime7)
      } else {
        updateTest("–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π", "success", "CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç", { insertedId: data?.[0]?.id }, Date.now() - startTime7)
      }
    } catch (err: any) {
      updateTest("–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π", "error", `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`, null, Date.now() - startTime7)
    }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const hasErrors = tests.some(test => test.status === "error")
      const hasWarnings = tests.some(test => test.status === "warning")
      const allSuccess = tests.every(test => test.status === "success")

      if (hasErrors) {
        setOverallStatus("error")
      } else if (hasWarnings) {
        setOverallStatus("warning")
      } else if (allSuccess) {
        setOverallStatus("success")
      } else {
        setOverallStatus("pending")
      }

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:", error)
      updateTest("–û–±—â–∞—è –æ—à–∏–±–∫–∞", "error", `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`)
      setOverallStatus("error")
    } finally {
      setIsRunning(false)
      console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success": return "bg-green-100 text-green-800 border-green-200"
      case "error": return "bg-red-100 text-red-800 border-red-200"
      case "warning": return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "running": return "bg-blue-100 text-blue-800 border-blue-200"
      default: return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success": return "‚úÖ"
      case "error": return "‚ùå"
      case "warning": return "‚ö†Ô∏è"
      case "running": return "üîÑ"
      default: return "‚è≥"
    }
  }

  const getOverallStatusColor = () => {
    switch (overallStatus) {
      case "success": return "bg-green-500"
      case "error": return "bg-red-500"
      case "warning": return "bg-yellow-500"
      case "running": return "bg-blue-500"
      default: return "bg-gray-500"
    }
  }

  const completedTests = tests.filter(test => test.status === "success" || test.status === "error" || test.status === "warning").length
  const progress = (completedTests / tests.length) * 100

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-orange-50 p-8">
      <div className="container mx-auto max-w-6xl">
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üß™ –ü–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase
              <Badge variant="outline">–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {/* –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å */}
            <div className="mb-6">
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</span>
                <span className="text-sm text-gray-600">{completedTests} –∏–∑ {tests.length} —Ç–µ—Å—Ç–æ–≤</span>
              </div>
              <Progress value={progress} className="mb-2" />
              <div className="flex items-center gap-2">
                <div className={`w-3 h-3 rounded-full ${getOverallStatusColor()}`}></div>
                <span className="text-sm">
                  {overallStatus === "success" && "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"}
                  {overallStatus === "error" && "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏"}
                  {overallStatus === "warning" && "–ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"}
                  {overallStatus === "running" && "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"}
                  {overallStatus === "pending" && "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞"}
                </span>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex gap-4 mb-6">
              <Button 
                onClick={() => {
                  console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
                  runAllTests()
                }} 
                disabled={isRunning}
                className="flex-1"
              >
                {isRunning ? "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..." : "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"}
              </Button>
              
              <Button 
                onClick={() => {
                  console.log("–°–±—Ä–æ—Å –Ω–∞–∂–∞—Ç!")
                  setTests(prev => prev.map(test => ({ ...test, status: "pending", message: "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞" })))
                  setOverallStatus("pending")
                }}
                variant="outline"
                disabled={isRunning}
              >
                üîÑ –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
            <div className="space-y-4">
              {tests.map((test, index) => (
                <Card key={index} className={`border-l-4 ${getStatusColor(test.status)}`}>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <span className="text-lg">{getStatusIcon(test.status)}</span>
                        <h3 className="font-semibold">{test.name}</h3>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge className={getStatusColor(test.status)}>
                          {test.status}
                        </Badge>
                        {test.duration && (
                          <Badge variant="outline">
                            {test.duration}ms
                          </Badge>
                        )}
                      </div>
                    </div>
                    <p className="text-sm mb-2">{test.message}</p>
                    {test.details && (
                      <details className="text-xs">
                        <summary className="cursor-pointer text-gray-600 hover:text-gray-800">
                          –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                        </summary>
                        <pre className="bg-gray-50 p-2 rounded mt-2 overflow-auto">
                          {JSON.stringify(test.details, null, 2)}
                        </pre>
                      </details>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã */}
            <Card className="mt-6">
              <CardHeader>
                <CardTitle className="text-lg">–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Link href="/supabase-test">
                    <Card className="hover:shadow-md transition-shadow cursor-pointer">
                      <CardContent className="p-4 text-center">
                        <div className="text-2xl mb-2">üîç</div>
                        <h3 className="font-semibold">–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
                        <p className="text-sm text-gray-600">–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î</p>
                      </CardContent>
                    </Card>
                  </Link>
                  
                  <Link href="/auth-test">
                    <Card className="hover:shadow-md transition-shadow cursor-pointer">
                      <CardContent className="p-4 text-center">
                        <div className="text-2xl mb-2">üîê</div>
                        <h3 className="font-semibold">–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h3>
                        <p className="text-sm text-gray-600">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥</p>
                      </CardContent>
                    </Card>
                  </Link>
                  
                  <Link href="/db-structure">
                    <Card className="hover:shadow-md transition-shadow cursor-pointer">
                      <CardContent className="p-4 text-center">
                        <div className="text-2xl mb-2">üóÑÔ∏è</div>
                        <h3 className="font-semibold">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î</h3>
                        <p className="text-sm text-gray-600">–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü</p>
                      </CardContent>
                    </Card>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
