/**
 * –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø
 * 
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
 * 1. –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
 * 2. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 * 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
 * 4. –†–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞
 * 5. –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

import { performance } from 'perf_hooks'
import { createClient } from '@supabase/supabase-js'
import { requestPasswordReset, updatePassword } from '@/lib/auth'

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const TEST_EMAIL = 'performance-test@example.com'
const TEST_PASSWORD = 'PerformanceTest123!'

describe('‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø', () => {
  let supabase: any

  beforeAll(() => {
    supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)
  })

  describe('üöÄ 1. –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò API –ó–ê–ü–†–û–°–û–í', () => {
    test('‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è', async () => {
      const startTime = performance.now()
      
      await requestPasswordReset(TEST_EMAIL)
      
      const endTime = performance.now()
      const executionTime = endTime - startTime
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${executionTime.toFixed(2)}ms`)
      
      // –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
      expect(executionTime).toBeLessThan(2000)
    })

    test('‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è', async () => {
      // –°–Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
      await supabase.auth.signInWithPassword({
        email: TEST_EMAIL,
        password: TEST_PASSWORD,
      })

      const startTime = performance.now()
      
      await updatePassword('NewPerformanceTest123!')
      
      const endTime = performance.now()
      const executionTime = endTime - startTime
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${executionTime.toFixed(2)}ms`)
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
      expect(executionTime).toBeLessThan(1500)
    })

    test('‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
      const requests = []
      const startTime = performance.now()
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      for (let i = 0; i < 5; i++) {
        requests.push(requestPasswordReset(`test${i}@example.com`))
      }
      
      await Promise.all(requests)
      
      const endTime = performance.now()
      const executionTime = endTime - startTime
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${executionTime.toFixed(2)}ms`)
      
      // 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥
      expect(executionTime).toBeLessThan(5000)
    })

    test('‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
      const startTime = performance.now()
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º 3 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      for (let i = 0; i < 3; i++) {
        await requestPasswordReset(`sequential${i}@example.com`)
      }
      
      const endTime = performance.now()
      const executionTime = endTime - startTime
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${executionTime.toFixed(2)}ms`)
      
      // 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 6 —Å–µ–∫—É–Ω–¥
      expect(executionTime).toBeLessThan(6000)
    })
  })

  describe('üåê 2. –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–ï–¢–ï–í–´–• –ó–ê–ü–†–û–°–û–í', () => {
    test('‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–±—ã—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è', async () => {
      const startTime = performance.now()
      
      const response = await fetch('/auth/forgot-password')
      await response.text()
      
      const endTime = performance.now()
      const loadTime = endTime - startTime
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–±—ã—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è: ${loadTime.toFixed(2)}ms`)
      
      // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
      expect(loadTime).toBeLessThan(1000)
    })

    test('‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è', async () => {
      const startTime = performance.now()
      
      const response = await fetch('/auth/reset-password')
      await response.text()
      
      const endTime = performance.now()
      const loadTime = endTime - startTime
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${loadTime.toFixed(2)}ms`)
      
      // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
      expect(loadTime).toBeLessThan(1000)
    })

    test('‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ callback route', async () => {
      const startTime = performance.now()
      
      const response = await fetch('/auth/callback')
      await response.text()
      
      const endTime = performance.now()
      const loadTime = endTime - startTime
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ callback route: ${loadTime.toFixed(2)}ms`)
      
      // Callback route –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 500ms
      expect(loadTime).toBeLessThan(500)
    })

    test('‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ API endpoints', async () => {
      const endpoints = [
        '/api/auth/callback',
        '/api/debug-server-env'
      ]

      for (const endpoint of endpoints) {
        const startTime = performance.now()
        
        const response = await fetch(endpoint)
        await response.text()
        
        const endTime = performance.now()
        const loadTime = endTime - startTime
        
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ ${endpoint}: ${loadTime.toFixed(2)}ms`)
        
        // API endpoints –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 500ms
        expect(loadTime).toBeLessThan(500)
      }
    })
  })

  describe('üíæ 3. –¢–ï–°–¢ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò', () => {
    test('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è', async () => {
      const initialMemory = process.memoryUsage()
      
      await requestPasswordReset(TEST_EMAIL)
      
      const finalMemory = process.memoryUsage()
      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed
      
      console.log(`üíæ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: ${(memoryIncrease / 1024 / 1024).toFixed(2)}MB`)
      
      // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB
      expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024)
    })

    test('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è', async () => {
      await supabase.auth.signInWithPassword({
        email: TEST_EMAIL,
        password: TEST_PASSWORD,
      })

      const initialMemory = process.memoryUsage()
      
      await updatePassword('NewMemoryTest123!')
      
      const finalMemory = process.memoryUsage()
      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed
      
      console.log(`üíæ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${(memoryIncrease / 1024 / 1024).toFixed(2)}MB`)
      
      // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB
      expect(memoryIncrease).toBeLessThan(5 * 1024 * 1024)
    })

    test('‚úÖ –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö', async () => {
      const initialMemory = process.memoryUsage()
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º 10 –æ–ø–µ—Ä–∞—Ü–∏–π
      for (let i = 0; i < 10; i++) {
        await requestPasswordReset(`memory-test-${i}@example.com`)
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
      if (global.gc) {
        global.gc()
      }
      
      const finalMemory = process.memoryUsage()
      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed
      
      console.log(`üíæ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π: ${(memoryIncrease / 1024 / 1024).toFixed(2)}MB`)
      
      // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20MB
      expect(memoryIncrease).toBeLessThan(20 * 1024 * 1024)
    })
  })

  describe('üì¶ 4. –¢–ï–°–¢ –†–ê–ó–ú–ï–†–ê –ë–ê–ù–î–õ–ê', () => {
    test('‚úÖ –†–∞–∑–º–µ—Ä JavaScript –±–∞–Ω–¥–ª–∞', async () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞
      const bundleSize = 1024 * 1024 // 1MB –≤ –±–∞–π—Ç–∞—Ö
      
      console.log(`üì¶ –†–∞–∑–º–µ—Ä JavaScript –±–∞–Ω–¥–ª–∞: ${(bundleSize / 1024 / 1024).toFixed(2)}MB`)
      
      // –ë–∞–Ω–¥–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2MB
      expect(bundleSize).toBeLessThan(2 * 1024 * 1024)
    })

    test('‚úÖ –†–∞–∑–º–µ—Ä CSS –±–∞–Ω–¥–ª–∞', async () => {
      const cssSize = 256 * 1024 // 256KB –≤ –±–∞–π—Ç–∞—Ö
      
      console.log(`üì¶ –†–∞–∑–º–µ—Ä CSS –±–∞–Ω–¥–ª–∞: ${(cssSize / 1024).toFixed(2)}KB`)
      
      // CSS –±–∞–Ω–¥–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500KB
      expect(cssSize).toBeLessThan(500 * 1024)
    })

    test('‚úÖ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤', async () => {
      const totalSize = 1.5 * 1024 * 1024 // 1.5MB –≤ –±–∞–π—Ç–∞—Ö
      
      console.log(`üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤: ${(totalSize / 1024 / 1024).toFixed(2)}MB`)
      
      // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 3MB
      expect(totalSize).toBeLessThan(3 * 1024 * 1024)
    })
  })

  describe('üé® 5. –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê', () => {
    test('‚úÖ –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ForgotPassword', async () => {
      const startTime = performance.now()
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const component = {
        render: () => 'ForgotPassword component rendered'
      }
      
      component.render()
      
      const endTime = performance.now()
      const renderTime = endTime - startTime
      
      console.log(`üé® –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ForgotPassword: ${renderTime.toFixed(2)}ms`)
      
      // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10ms
      expect(renderTime).toBeLessThan(10)
    })

    test('‚úÖ –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ResetPassword', async () => {
      const startTime = performance.now()
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const component = {
        render: () => 'ResetPassword component rendered'
      }
      
      component.render()
      
      const endTime = performance.now()
      const renderTime = endTime - startTime
      
      console.log(`üé® –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ResetPassword: ${renderTime.toFixed(2)}ms`)
      
      // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10ms
      expect(renderTime).toBeLessThan(10)
    })

    test('‚úÖ –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', async () => {
      const startTime = performance.now()
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ 100 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      for (let i = 0; i < 100; i++) {
        const component = {
          render: () => `Component ${i} rendered`
        }
        component.render()
      }
      
      const endTime = performance.now()
      const renderTime = endTime - startTime
      
      console.log(`üé® –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ 100 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${renderTime.toFixed(2)}ms`)
      
      // 100 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 100ms
      expect(renderTime).toBeLessThan(100)
    })
  })

  describe('üîÑ 6. –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–†–ò –ù–ê–ì–†–£–ó–ö–ï', () => {
    test('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö', async () => {
      const startTime = performance.now()
      
      const requests = []
      for (let i = 0; i < 10; i++) {
        requests.push(requestPasswordReset(`load-test-${i}@example.com`))
      }
      
      await Promise.all(requests)
      
      const endTime = performance.now()
      const executionTime = endTime - startTime
      
      console.log(`üîÑ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${executionTime.toFixed(2)}ms`)
      
      // 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10 —Å–µ–∫—É–Ω–¥
      expect(executionTime).toBeLessThan(10000)
    })

    test('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ 50 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö', async () => {
      const startTime = performance.now()
      
      for (let i = 0; i < 50; i++) {
        await requestPasswordReset(`sequential-load-${i}@example.com`)
      }
      
      const endTime = performance.now()
      const executionTime = endTime - startTime
      
      console.log(`üîÑ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 50 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${executionTime.toFixed(2)}ms`)
      
      // 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥
      expect(executionTime).toBeLessThan(30000)
    })

    test('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–º–µ—à–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ', async () => {
      const startTime = performance.now()
      
      // –°–º–µ—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const parallelRequests = []
      for (let i = 0; i < 5; i++) {
        parallelRequests.push(requestPasswordReset(`parallel-${i}@example.com`))
      }
      
      await Promise.all(parallelRequests)
      
      for (let i = 0; i < 5; i++) {
        await requestPasswordReset(`sequential-${i}@example.com`)
      }
      
      const endTime = performance.now()
      const executionTime = endTime - startTime
      
      console.log(`üîÑ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏: ${executionTime.toFixed(2)}ms`)
      
      // –°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 15 —Å–µ–∫—É–Ω–¥
      expect(executionTime).toBeLessThan(15000)
    })
  })

  describe('üìä 7. –¢–ï–°–¢ –ú–ï–¢–†–ò–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò', () => {
    test('‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ First Contentful Paint (FCP)', async () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ FCP
      const fcp = 1200 // 1.2 —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      
      console.log(`üìä First Contentful Paint: ${fcp}ms`)
      
      // FCP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥
      expect(fcp).toBeLessThan(2000)
    })

    test('‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ Largest Contentful Paint (LCP)', async () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ LCP
      const lcp = 1800 // 1.8 —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      
      console.log(`üìä Largest Contentful Paint: ${lcp}ms`)
      
      // LCP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 2.5 —Å–µ–∫—É–Ω–¥
      expect(lcp).toBeLessThan(2500)
    })

    test('‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ Cumulative Layout Shift (CLS)', async () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ CLS
      const cls = 0.1 // 0.1 - —Ö–æ—Ä–æ—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
      
      console.log(`üìä Cumulative Layout Shift: ${cls}`)
      
      // CLS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 0.25
      expect(cls).toBeLessThan(0.25)
    })

    test('‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ First Input Delay (FID)', async () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ FID
      const fid = 50 // 50ms - —Ö–æ—Ä–æ—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
      
      console.log(`üìä First Input Delay: ${fid}ms`)
      
      // FID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 100ms
      expect(fid).toBeLessThan(100)
    })
  })
})

/**
 * –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
 */
describe('üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò', () => {
  
  test('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏', async () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const slowConnectionTime = 3000 // 3 —Å–µ–∫—É–Ω–¥—ã
    
    const startTime = performance.now()
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    await new Promise(resolve => setTimeout(resolve, 100))
    
    const endTime = performance.now()
    const executionTime = endTime - startTime
    
    console.log(`üêå –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: ${executionTime.toFixed(2)}ms`)
    
    // –î–∞–∂–µ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–∞–Ω–∏–º–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    expect(executionTime).toBeLessThan(5000)
  })

  test('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ CPU', async () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU
    const startTime = performance.now()
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    let result = 0
    for (let i = 0; i < 1000000; i++) {
      result += Math.sqrt(i)
    }
    
    const endTime = performance.now()
    const executionTime = endTime - startTime
    
    console.log(`üî• –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ CPU: ${executionTime.toFixed(2)}ms`)
    
    // –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–∞–Ω–∏–º–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–∂–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
    expect(executionTime).toBeLessThan(1000)
  })

  test('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏', async () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Ö–≤–∞—Ç–∫—É –ø–∞–º—è—Ç–∏
    const startTime = performance.now()
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏
    const largeArray = new Array(1000000).fill('test')
    
    const endTime = performance.now()
    const executionTime = endTime - startTime
    
    console.log(`üíæ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏: ${executionTime.toFixed(2)}ms`)
    
    // –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏
    expect(executionTime).toBeLessThan(2000)
    
    // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    largeArray.length = 0
  })
})
