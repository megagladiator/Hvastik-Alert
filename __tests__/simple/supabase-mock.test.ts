/**
 * –¢–ï–°–¢ –ú–û–ö–û–í SUPABASE
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–∏ Supabase —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */

import { createClient } from '@/lib/supabase/client'

describe('üîß –¢–µ—Å—Ç –º–æ–∫–æ–≤ Supabase', () => {
  test('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase', () => {
    const supabase = createClient()
    
    expect(supabase).toBeDefined()
    expect(supabase.auth).toBeDefined()
    expect(supabase.auth.resetPasswordForEmail).toBeDefined()
    expect(supabase.auth.exchangeCodeForSession).toBeDefined()
    expect(supabase.auth.updateUser).toBeDefined()
    expect(supabase.auth.signOut).toBeDefined()
    expect(supabase.auth.getSession).toBeDefined()
  })

  test('‚úÖ –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ resetPasswordForEmail', async () => {
    const supabase = createClient()
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
    const mockResult = { data: {}, error: null }
    ;(supabase.auth.resetPasswordForEmail as jest.Mock).mockResolvedValue(mockResult)
    
    const result = await supabase.auth.resetPasswordForEmail('test@example.com')
    
    expect(result).toEqual(mockResult)
    expect(supabase.auth.resetPasswordForEmail).toHaveBeenCalledWith('test@example.com')
  })

  test('‚úÖ –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ updateUser', async () => {
    const supabase = createClient()
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
    const mockResult = { data: { user: { id: '123' } }, error: null }
    ;(supabase.auth.updateUser as jest.Mock).mockResolvedValue(mockResult)
    
    const result = await supabase.auth.updateUser({ password: 'newpassword' })
    
    expect(result).toEqual(mockResult)
    expect(supabase.auth.updateUser).toHaveBeenCalledWith({ password: 'newpassword' })
  })

  test('‚úÖ –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ getSession', async () => {
    const supabase = createClient()
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
    const mockResult = { data: { session: null }, error: null }
    ;(supabase.auth.getSession as jest.Mock).mockResolvedValue(mockResult)
    
    const result = await supabase.auth.getSession()
    
    expect(result).toEqual(mockResult)
    expect(supabase.auth.getSession).toHaveBeenCalled()
  })
})
