/**
 * –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –º–æ–∫–∞–º–∏
 */

import { createClient } from '@/lib/supabase/client'

// –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ lib/auth
jest.mock('@/lib/auth', () => ({
  requestPasswordReset: jest.fn(),
  exchangeCodeForSession: jest.fn(),
  updatePassword: jest.fn(),
}))

import { requestPasswordReset, exchangeCodeForSession, updatePassword } from '@/lib/auth'

const TEST_EMAIL = 'test@example.com'
const TEST_PASSWORD = 'TestPassword123!'
const NEW_PASSWORD = 'NewTestPassword456!'

describe('üîê –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø', () => {
  let supabase: any

  beforeEach(() => {
    supabase = createClient()
    jest.clearAllMocks()
  })

  describe('üìß 1. –¢–ï–°–¢ –ó–ê–ü–†–û–°–ê –°–°–´–õ–ö–ò –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø', () => {
    test('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      ;(requestPasswordReset as jest.Mock).mockResolvedValue({
        success: true,
        message: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à email'
      })

      const result = await requestPasswordReset(TEST_EMAIL)
      
      expect(result.success).toBe(true)
      expect(result.message).toContain('–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
      expect(requestPasswordReset).toHaveBeenCalledWith(TEST_EMAIL)
    })

    test('‚ùå –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
      ;(requestPasswordReset as jest.Mock).mockResolvedValue({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
      })

      const result = await requestPasswordReset('invalid-email')
      
      expect(result.success).toBe(false)
      expect(result.error).toContain('email')
    })

    test('‚ùå –ó–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º email', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
      ;(requestPasswordReset as jest.Mock).mockResolvedValue({
        success: false,
        error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })

      const result = await requestPasswordReset('')
      
      expect(result.success).toBe(false)
      expect(result.error).toContain('–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    })
  })

  describe('üîÑ 2. –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò CALLBACK', () => {
    test('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞ PKCE', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      ;(exchangeCodeForSession as jest.Mock).mockResolvedValue({
        success: true,
        message: '–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
      })

      const result = await exchangeCodeForSession('valid_code_123')
      
      expect(result.success).toBe(true)
      expect(exchangeCodeForSession).toHaveBeenCalledWith('valid_code_123')
    })

    test('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
      ;(exchangeCodeForSession as jest.Mock).mockResolvedValue({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
      })

      const result = await exchangeCodeForSession('invalid_code')
      
      expect(result.success).toBe(false)
      expect(result.error).toContain('–ù–µ–≤–µ—Ä–Ω—ã–π')
    })
  })

  describe('üîë 3. –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–ê–†–û–õ–Ø', () => {
    test('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      ;(updatePassword as jest.Mock).mockResolvedValue({
        success: true,
        message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      })

      const result = await updatePassword(NEW_PASSWORD)
      
      expect(result.success).toBe(true)
      expect(result.message).toContain('–æ–±–Ω–æ–≤–ª–µ–Ω')
      expect(updatePassword).toHaveBeenCalledWith(NEW_PASSWORD)
    })

    test('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
      ;(updatePassword as jest.Mock).mockResolvedValue({
        success: false,
        error: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'
      })

      const result = await updatePassword('123')
      
      expect(result.success).toBe(false)
      expect(result.error).toContain('–∫–æ—Ä–æ—Ç–∫–∏–π')
    })

    test('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–≥–æ –∂–µ –ø–∞—Ä–æ–ª—è', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
      ;(updatePassword as jest.Mock).mockResolvedValue({
        success: false,
        error: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ'
      })

      const result = await updatePassword(TEST_PASSWORD)
      
      expect(result.success).toBe(false)
      expect(result.error).toContain('–æ—Ç–ª–∏—á–∞—Ç—å—Å—è')
    })
  })

  describe('üîí 4. –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò', () => {
    test('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞', async () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ code_verifier –≤ localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem('pkce_code_verifier', 'test_verifier')
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      ;(updatePassword as jest.Mock).mockResolvedValue({
        success: true,
        message: '–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'
      })

      await updatePassword(NEW_PASSWORD)

      // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ localStorage –Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–∫–∏, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
      expect(true).toBe(true) // –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
    })

    test('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      ;(updatePassword as jest.Mock).mockResolvedValue({
        success: true,
        message: '–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'
      })

      const result = await updatePassword(NEW_PASSWORD)

      expect(result.success).toBe(true)
      // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    })
  })

  describe('üì± 5. –¢–ï–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –û–ü–´–¢–ê', () => {
    test('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
      ;(updatePassword as jest.Mock).mockResolvedValue({
        success: false,
        error: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'
      })

      const result = await updatePassword('123')
      
      expect(result.error).toContain('–∫–æ—Ä–æ—Ç–∫–∏–π')
    })

    test('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—à–∏–±–æ–∫', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
      ;(updatePassword as jest.Mock).mockResolvedValue({
        success: false,
        error: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ'
      })

      const result = await updatePassword(TEST_PASSWORD)
      
      if (result.error.includes('–æ—Ç–ª–∏—á–∞—Ç—å—Å—è')) {
        expect(result.error).toContain('–æ—Ç–ª–∏—á–∞—Ç—å—Å—è')
      }
    })
  })

  describe('‚ö° 6. –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò', () => {
    test('‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      ;(requestPasswordReset as jest.Mock).mockResolvedValue({
        success: true,
        message: '–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
      })

      const startTime = Date.now()
      
      await requestPasswordReset(TEST_EMAIL)
      
      const endTime = Date.now()
      const executionTime = endTime - startTime
      
      // –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É (–≤ —Ç–µ—Å—Ç–∞—Ö —Å –º–æ–∫–∞–º–∏)
      expect(executionTime).toBeLessThan(1000)
    })

    test('‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      ;(updatePassword as jest.Mock).mockResolvedValue({
        success: true,
        message: '–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'
      })

      const startTime = Date.now()
      
      await updatePassword(NEW_PASSWORD)
      
      const endTime = Date.now()
      const executionTime = endTime - startTime
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É (–≤ —Ç–µ—Å—Ç–∞—Ö —Å –º–æ–∫–∞–º–∏)
      expect(executionTime).toBeLessThan(1000)
    })
  })

  describe('üîÑ 7. –¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ü–û–°–õ–ï –û–®–ò–ë–û–ö', () => {
    test('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
      ;(requestPasswordReset as jest.Mock).mockRejectedValue(new Error('Network error'))

      try {
        await requestPasswordReset(TEST_EMAIL)
        fail('–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–∞ –æ—à–∏–±–∫–∞')
      } catch (error) {
        expect(error.message).toContain('Network error')
      }
    })

    test('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞', async () => {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
      ;(requestPasswordReset as jest.Mock).mockRejectedValue(new Error('Timeout'))

      try {
        await requestPasswordReset(TEST_EMAIL)
        fail('–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–∞ –æ—à–∏–±–∫–∞')
      } catch (error) {
        expect(error.message).toContain('Timeout')
      }
    })
  })
})
