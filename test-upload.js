// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∑–∞–≥—Ä—É–∑–∫–∏
const fs = require('fs');
const path = require('path');

async function testUpload() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testImagePath = path.join(__dirname, 'public', 'placeholder.jpg');
    
    if (!fs.existsSync(testImagePath)) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç...');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–µ–∑ —Ñ–∞–π–ª–∞
      const response = await fetch('http://localhost:3000/api/upload', {
        method: 'POST',
        body: new FormData()
      });
      
      const result = await response.json();
      console.log('üì§ –û—Ç–≤–µ—Ç API:', result);
      
      if (response.status === 400) {
        console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"');
      } else {
        console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API');
      }
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É...');
      
      const formData = new FormData();
      formData.append('file', fs.createReadStream(testImagePath));
      
      const response = await fetch('http://localhost:3000/api/upload', {
        method: 'POST',
        body: formData
      });
      
      const result = await response.json();
      console.log('üì§ –û—Ç–≤–µ—Ç API:', result);
      
      if (response.ok) {
        console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        console.log('üîó URL:', result.url);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', result.error);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testUpload();
