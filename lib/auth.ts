import { createClient } from './supabase/client'

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PKCE code_verifier
export function generateCodeVerifier(len = 128): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~'
  let verifier = ''
  for (let i = 0; i < len; i++) {
    verifier += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return verifier
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export async function signUp(email: string, password: string) {
  const supabase = createClient()
  return supabase.auth.signUp({ email, password })
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
export async function signIn(email: string, password: string) {
  const supabase = createClient()
  return supabase.auth.signInWithPassword({ email, password })
}

// –í—ã—Ö–æ–¥
export async function signOut() {
  const supabase = createClient()
  return supabase.auth.signOut()
}

// –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º signInWithOtp –¥–ª—è –æ–±—Ö–æ–¥–∞ PKCE)
export async function requestPasswordReset(email: string) {
  console.log('üîç Forgot password request for:', email)
  
  const supabase = createClient()
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
  const baseUrl = process.env.NODE_ENV === 'production' 
    ? 'https://hvostikalert.ru' 
    : 'http://localhost:3000'
  
  console.log('üåê Base URL for password reset:', baseUrl)
  console.log('üåê NODE_ENV:', process.env.NODE_ENV)
  
  console.log('üìß Sending password reset email using signInWithOtp...')
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º signInWithOtp –≤–º–µ—Å—Ç–æ resetPasswordForEmail –¥–ª—è –æ–±—Ö–æ–¥–∞ PKCE –ø—Ä–æ–±–ª–µ–º
  const result = await supabase.auth.signInWithOtp({
    email: email,
    options: {
      emailRedirectTo: `${baseUrl}/auth/callback`,
      shouldCreateUser: false // –ù–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    }
  })
  
  console.log('üìß Password reset request result:', { email, error: result.error })
  return result
}

// –û–±–º–µ–Ω –∫–æ–¥–∞ –∏–∑ URL —Å–±—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Å—Å–∏—é (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ magic link —Ç–æ–∫–µ–Ω–æ–≤)
export async function exchangeCodeForSession(code: string) {
  console.log('Trying exchangeCodeForSession with magic link token...')
  
  const supabase = createClient()
  
  // –î–ª—è magic link —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º exchangeCodeForSession
  const result = await supabase.auth.exchangeCodeForSession({ code })
  
  if (result.error) {
    console.error('‚ùå Error from exchangeCodeForSession:', result.error)
  } else {
    console.log('‚úÖ exchangeCodeForSession successful')
  }
  
  return result
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
export async function updatePassword(newPassword: string) {
  console.log('üîë Updating password...')
  const supabase = createClient()
  const { error } = await supabase.auth.updateUser({ password: newPassword })
  
  if (error) {
    console.error('‚ùå Error updating password:', error)
    throw error
  }
  
  console.log('‚úÖ Password successfully updated')
  
  if (typeof window !== 'undefined') {
    localStorage.removeItem('pkce_code_verifier')
    console.log('üßπ Cleaned up code_verifier from localStorage')
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getCurrentUser() {
  const supabase = createClient()
  const { data: { user }, error } = await supabase.auth.getUser()
  if (error) throw error
  return user
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
export async function getCurrentSession() {
  const supabase = createClient()
  const { data: { session }, error } = await supabase.auth.getSession()
  if (error) throw error
  return session
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
export async function setSession(accessToken: string, refreshToken: string) {
  const supabase = createClient()
  return supabase.auth.setSession({
    access_token: accessToken,
    refresh_token: refreshToken
  })
}

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP —Ç–æ–∫–µ–Ω–∞
export async function verifyOtp(token: string, type: string) {
  console.log('üîç Verifying OTP token with type:', type)
  const supabase = createClient()
  const result = await supabase.auth.verifyOtp({
    token_hash: token,
    type: type as any
  })
  
  if (result.error) {
    console.error('‚ùå Error from verifyOtp:', result.error)
  } else {
    console.log('‚úÖ verifyOtp successful')
  }
  
  return result
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
export async function verifyPasswordResetToken(token: string) {
  console.log('üîç Verifying password reset token (NO SESSION SET)...')
  
  const supabase = createClient()
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω, –Ω–æ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
  const result = await supabase.auth.verifyOtp({
    token_hash: token,
    type: 'recovery'
  })
  
  if (result.error) {
    console.error('‚ùå Error from verifyPasswordResetToken:', result.error)
  } else {
    console.log('‚úÖ Password reset token verified successfully (but NO session set)')
    
    // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
    await supabase.auth.signOut()
    console.log('üîí Forced sign out after token verification')
  }
  
  return result
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ URL
export async function getSessionFromUrl() {
  const supabase = createClient()
  return supabase.auth.getSessionFromUrl()
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å service role –∫–ª—é—á–æ–º)
export async function deleteUser(userId: string) {
  const supabase = createClient()
  const { data, error } = await supabase.auth.admin.deleteUser(userId)
  if (error) throw error
  return data
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
export function isAuthenticated(): boolean {
  if (typeof window === 'undefined') return false
  const supabase = createClient()
  const session = supabase.auth.getSession()
  return !!session
}

// –û—á–∏—Å—Ç–∫–∞ code_verifier –∏–∑ localStorage
export function clearCodeVerifier() {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('pkce_code_verifier')
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ code_verifier –∏–∑ localStorage
export function getCodeVerifier(): string | null {
  if (typeof window === 'undefined') return null
  return localStorage.getItem('pkce_code_verifier')
}
